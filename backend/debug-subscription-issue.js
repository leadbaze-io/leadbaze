#!/usr/bin/env node
require('dotenv').config({ path: './config.env' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const userId = '66875e05-eace-49ac-bf07-0e794dbab8fd';

async function checkUserAndSubscription() {
  console.log('üîç INVESTIGANDO PROBLEMA DE ASSINATURA');
  console.log('=====================================');
  console.log(`üë§ Usu√°rio ID: ${userId}\n`);
  
  try {
    // 1. Verificar se usu√°rio existe
    console.log('1Ô∏è‚É£ Verificando usu√°rio...');
    const { data: user, error: userError } = await supabase.auth.admin.getUserById(userId);
    if (userError) {
      console.log('‚ùå Usu√°rio n√£o encontrado:', userError.message);
      return;
    }
    console.log('‚úÖ Usu√°rio encontrado:', user.email);
    console.log('üìÖ Criado em:', user.created_at);
    console.log('üìß Email confirmado:', user.email_confirmed_at ? 'Sim' : 'N√£o');
    console.log('');
    
    // 2. Verificar assinaturas existentes
    console.log('2Ô∏è‚É£ Verificando assinaturas...');
    const { data: subscriptions, error: subError } = await supabase
      .from('user_payment_subscriptions')
      .select(`
        *,
        payment_plans (
          id,
          name,
          display_name,
          leads_included
        )
      `)
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
      
    if (subError) {
      console.log('‚ùå Erro ao buscar assinaturas:', subError.message);
      return;
    }
    
    console.log(`üìä Assinaturas encontradas: ${subscriptions.length}`);
    if (subscriptions.length === 0) {
      console.log('‚ö†Ô∏è NENHUMA ASSINATURA ENCONTRADA - Este √© o problema!');
    } else {
      subscriptions.forEach((sub, index) => {
        console.log(`   ${index + 1}. Status: ${sub.status}`);
        console.log(`      Plano: ${sub.payment_plans?.display_name || 'N/A'}`);
        console.log(`      Leads: ${sub.leads_balance}`);
        console.log(`      Criado: ${sub.created_at}`);
        console.log(`      Perfect Pay ID: ${sub.perfect_pay_subscription_id || 'N/A'}`);
        console.log(`      Transaction ID: ${sub.perfect_pay_transaction_id || 'N/A'}`);
        console.log('');
      });
    }
    
    // 3. Verificar webhooks recentes
    console.log('3Ô∏è‚É£ Verificando webhooks recentes...');
    const { data: webhooks, error: webhookError } = await supabase
      .from('perfect_pay_webhooks')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (webhookError) {
      console.log('‚ö†Ô∏è Erro ao buscar webhooks:', webhookError.message);
    } else {
      console.log(`üì® Webhooks recentes: ${webhooks.length}`);
      if (webhooks.length === 0) {
        console.log('‚ö†Ô∏è NENHUM WEBHOOK ENCONTRADO - Poss√≠vel problema de configura√ß√£o!');
      } else {
        webhooks.forEach((webhook, index) => {
          console.log(`   ${index + 1}. Status: ${webhook.status}`);
          console.log(`      Processado: ${webhook.processed ? 'Sim' : 'N√£o'}`);
          console.log(`      Criado: ${webhook.created_at}`);
          console.log(`      Sale Status: ${webhook.sale_status_enum}`);
          console.log(`      Amount: R$ ${webhook.sale_amount || 'N/A'}`);
          console.log(`      Customer Email: ${webhook.customer_email || 'N/A'}`);
          console.log('');
        });
      }
    }
    
    // 4. Verificar se h√° webhooks com o email do usu√°rio
    console.log('4Ô∏è‚É£ Verificando webhooks para este usu√°rio...');
    const { data: userWebhooks, error: userWebhookError } = await supabase
      .from('perfect_pay_webhooks')
      .select('*')
      .eq('customer_email', user.email)
      .order('created_at', { ascending: false });
      
    if (userWebhookError) {
      console.log('‚ö†Ô∏è Erro ao buscar webhooks do usu√°rio:', userWebhookError.message);
    } else {
      console.log(`üì® Webhooks para ${user.email}: ${userWebhooks.length}`);
      if (userWebhooks.length === 0) {
        console.log('‚ö†Ô∏è NENHUM WEBHOOK ENCONTRADO PARA ESTE EMAIL!');
        console.log('üí° Poss√≠veis causas:');
        console.log('   - Webhook n√£o foi enviado pelo Perfect Pay');
        console.log('   - Email no webhook √© diferente do cadastrado');
        console.log('   - Webhook foi enviado mas n√£o processado');
      } else {
        userWebhooks.forEach((webhook, index) => {
          console.log(`   ${index + 1}. Status: ${webhook.status}`);
          console.log(`      Processado: ${webhook.processed ? 'Sim' : 'N√£o'}`);
          console.log(`      Criado: ${webhook.created_at}`);
          console.log(`      Sale Status: ${webhook.sale_status_enum}`);
          console.log(`      Amount: R$ ${webhook.sale_amount || 'N/A'}`);
          console.log('');
        });
      }
    }
    
    // 5. Verificar planos dispon√≠veis
    console.log('5Ô∏è‚É£ Verificando planos dispon√≠veis...');
    const { data: plans, error: plansError } = await supabase
      .from('payment_plans')
      .select('*')
      .order('price_cents', { ascending: true });
      
    if (plansError) {
      console.log('‚ùå Erro ao buscar planos:', plansError.message);
    } else {
      console.log('üì¶ Planos dispon√≠veis:');
      plans.forEach(plan => {
        console.log(`   - ${plan.display_name}: R$ ${(plan.price_cents / 100).toFixed(2)} (${plan.leads_included} leads)`);
      });
    }
    
    console.log('\nüéØ DIAGN√ìSTICO:');
    console.log('================');
    if (subscriptions.length === 0) {
      console.log('‚ùå PROBLEMA: Usu√°rio n√£o possui assinatura ativa');
      console.log('üí° SOLU√á√ÉO: Verificar se o webhook foi processado corretamente');
    } else {
      console.log('‚úÖ Usu√°rio possui assinatura(s)');
    }
    
    if (userWebhooks.length === 0) {
      console.log('‚ùå PROBLEMA: Nenhum webhook encontrado para este usu√°rio');
      console.log('üí° SOLU√á√ÉO: Verificar configura√ß√£o do webhook no Perfect Pay');
    } else {
      console.log('‚úÖ Webhooks encontrados para este usu√°rio');
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
  }
}

checkUserAndSubscription();




