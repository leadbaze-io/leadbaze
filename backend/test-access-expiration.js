const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  'https://lsvwjyhnnzeewuuuykmb.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxzdndqeWhubnplZXd1dXV5a21iIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDMzNzg1NiwiZXhwIjoyMDY5OTEzODU2fQ.XeXm2_L1IBhytbQPpEnmUgygv22TOcu8SCWelHcW3Mk'
);

const TEST_USER_ID = '39dc6c62-6dea-4222-adb5-7075fd704189';

async function testAccessExpiration() {
  console.log('üöÄ ===== TESTE: EXPIRA√á√ÉO DE ACESSO =====\n');

  try {
    // 1. Verificar estado atual
    console.log('1Ô∏è‚É£ Verificando estado atual...');
    const { data: subscription, error: subError } = await supabase
      .from('user_payment_subscriptions')
      .select(`
        *,
        payment_plans (
          name,
          display_name,
          price_cents,
          leads_included
        )
      `)
      .eq('user_id', TEST_USER_ID)
      .in('status', ['active', 'cancelled'])
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (subError) {
      console.error('‚ùå Erro ao buscar assinatura:', subError);
      return;
    }

    if (!subscription) {
      console.log('‚ùå Nenhuma assinatura encontrada');
      return;
    }

    console.log('‚úÖ Estado atual:');
    console.log(`   Status: ${subscription.status}`);
    console.log(`   Plano: ${subscription.payment_plans.display_name}`);
    console.log(`   Leads dispon√≠veis: ${subscription.leads_balance}`);
    console.log(`   Acesso at√©: ${subscription.current_period_end}`);
    console.log(`   Data atual: ${new Date().toISOString()}`);

    // 2. Simular expira√ß√£o do acesso (definir current_period_end para ontem)
    console.log('\n2Ô∏è‚É£ Simulando expira√ß√£o do acesso...');
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    const { data: updateResult, error: updateError } = await supabase
      .from('user_payment_subscriptions')
      .update({
        current_period_end: yesterday.toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', subscription.id)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erro ao atualizar assinatura:', updateError);
      return;
    }

    console.log('‚úÖ Acesso expirado simulado!');
    console.log(`   Novo current_period_end: ${updateResult.current_period_end}`);

    // 3. Verificar estado ap√≥s expira√ß√£o
    console.log('\n3Ô∏è‚É£ Verificando estado ap√≥s expira√ß√£o...');
    const { data: subscriptionAfter, error: subAfterError } = await supabase
      .from('user_payment_subscriptions')
      .select(`
        *,
        payment_plans (
          name,
          display_name,
          price_cents,
          leads_included
        )
      `)
      .eq('user_id', TEST_USER_ID)
      .in('status', ['active', 'cancelled'])
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (subAfterError) {
      console.error('‚ùå Erro ao buscar assinatura ap√≥s expira√ß√£o:', subAfterError);
      return;
    }

    console.log('‚úÖ Estado ap√≥s expira√ß√£o:');
    console.log(`   Status: ${subscriptionAfter.status}`);
    console.log(`   Leads dispon√≠veis: ${subscriptionAfter.leads_balance}`);
    console.log(`   Acesso at√©: ${subscriptionAfter.current_period_end}`);

    // 4. Testar API para verificar comportamento
    console.log('\n4Ô∏è‚É£ Testando API ap√≥s expira√ß√£o...');
    const apiResponse = await fetch(`http://localhost:3001/api/perfect-pay/subscription/${TEST_USER_ID}`);
    const apiData = await apiResponse.json();

    if (apiData.success && apiData.data) {
      console.log('‚úÖ API retornando dados:');
      console.log(`   Status: ${apiData.data.status}`);
      console.log(`   Leads restantes: ${apiData.data.leads_remaining}`);
      console.log(`   Acesso at√©: ${apiData.data.access_until}`);
      console.log(`   √â cancelada: ${apiData.data.is_cancelled}`);
      
      // Verificar se o acesso expirou
      const accessUntil = new Date(apiData.data.access_until);
      const now = new Date();
      const isExpired = now > accessUntil;
      
      console.log(`\nüìä An√°lise de expira√ß√£o:`);
      console.log(`   Data atual: ${now.toISOString()}`);
      console.log(`   Acesso at√©: ${accessUntil.toISOString()}`);
      console.log(`   Acesso expirado: ${isExpired ? 'SIM' : 'N√ÉO'}`);
      
      if (isExpired) {
        console.log('\nüéØ COMPORTAMENTO ESPERADO:');
        console.log('   ‚Ä¢ Usu√°rio deve voltar para conta gratuita');
        console.log('   ‚Ä¢ Leads da assinatura devem ser zerados');
        console.log('   ‚Ä¢ Apenas leads b√¥nus devem estar dispon√≠veis');
        console.log('   ‚Ä¢ Interface deve mostrar "Sem assinatura ativa"');
      }
    } else {
      console.log('‚ùå API n√£o retornou dados corretos');
    }

    // 5. Verificar leads b√¥nus do usu√°rio
    console.log('\n5Ô∏è‚É£ Verificando leads b√¥nus...');
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('bonus_leads, bonus_leads_used')
      .eq('user_id', TEST_USER_ID)
      .single();

    if (profileError) {
      console.error('‚ùå Erro ao buscar perfil:', profileError);
    } else {
      const bonusLeadsRemaining = (profile.bonus_leads || 0) - (profile.bonus_leads_used || 0);
      console.log('‚úÖ Leads b√¥nus:');
      console.log(`   Total b√¥nus: ${profile.bonus_leads || 0}`);
      console.log(`   Usados: ${profile.bonus_leads_used || 0}`);
      console.log(`   Restantes: ${bonusLeadsRemaining}`);
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

testAccessExpiration();









