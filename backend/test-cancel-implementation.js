const PerfectPayService = require('./services/perfectPayService');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

const perfectPayService = new PerfectPayService(supabase);

async function testCancelImplementation() {
  console.log('üß™ [TESTE] ===== TESTANDO IMPLEMENTA√á√ÉO DE CANCELAMENTO =====');

  try {
    // Teste 1: Verificar se o m√©todo existe
    console.log('\nüìã [TESTE 1] Verificando se o m√©todo cancelPerfectPaySubscription existe...');
    if (typeof perfectPayService.cancelPerfectPaySubscription === 'function') {
      console.log('‚úÖ [TESTE 1] M√©todo cancelPerfectPaySubscription existe');
    } else {
      console.log('‚ùå [TESTE 1] M√©todo cancelPerfectPaySubscription n√£o existe');
      return;
    }

    // Teste 2: Verificar configura√ß√µes
    console.log('\nüìã [TESTE 2] Verificando configura√ß√µes...');
    console.log('  - Access Token:', perfectPayService.accessToken ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('  - Base URL:', perfectPayService.baseUrl);
    console.log('  - Webhook Secret:', perfectPayService.webhookSecret ? '‚úÖ Configurado' : '‚ùå N√£o configurado');

    // Teste 3: Simular cancelamento com dados inv√°lidos
    console.log('\nüìã [TESTE 3] Testando com dados inv√°lidos...');
    const mockSubscription = {
      id: 'test-id',
      user_id: 'test-user',
      perfect_pay_subscription_id: null // Simular ID inv√°lido
    };

    const result1 = await perfectPayService.cancelPerfectPaySubscription(mockSubscription);
    console.log('  - Resultado com ID inv√°lido:', result1.success ? '‚ùå Deveria falhar' : '‚úÖ Falhou corretamente');
    console.log('  - Erro:', result1.error);

    // Teste 4: Simular cancelamento com dados v√°lidos (mas sem token)
    console.log('\nüìã [TESTE 4] Testando com dados v√°lidos...');
    const mockSubscription2 = {
      id: 'test-id-2',
      user_id: 'test-user-2',
      perfect_pay_subscription_id: 'PPSUB123456'
    };

    const result2 = await perfectPayService.cancelPerfectPaySubscription(mockSubscription2);
    console.log('  - Resultado com dados v√°lidos:', result2.success ? '‚úÖ Sucesso' : '‚ö†Ô∏è Falhou (esperado se API n√£o existir)');
    console.log('  - Erro:', result2.error);

    // Teste 5: Verificar se o m√©todo cancelSubscription foi atualizado
    console.log('\nüìã [TESTE 5] Verificando integra√ß√£o no m√©todo principal...');
    const cancelSubscriptionCode = perfectPayService.cancelSubscription.toString();
    if (cancelSubscriptionCode.includes('cancelPerfectPaySubscription')) {
      console.log('‚úÖ [TESTE 5] M√©todo principal integrado com API');
    } else {
      console.log('‚ùå [TESTE 5] M√©todo principal n√£o integrado');
    }

  } catch (error) {
    console.error('‚ùå [TESTE] Erro inesperado:', error.message);
  }

  console.log('\nüéØ [TESTE] ===== CONCLUS√ÉO =====');
  console.log('‚úÖ [TESTE] Implementa√ß√£o do cancelamento via API testada');
  console.log('üí° [TESTE] Pronto para deploy quando autorizado');
}

testCancelImplementation().catch(console.error);








