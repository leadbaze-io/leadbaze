/**
 * =====================================================
 * BLOG QUEUE ROUTES - LeadFlow
 * Rotas para gerenciamento da fila de posts do blog
 * =====================================================
 */

const express = require('express');
const router = express.Router();
const { createClient } = require('@supabase/supabase-js');

// Fun√ß√£o para obter cliente Supabase
function getSupabaseClient() {
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceKey) {
        throw new Error('‚ùå Vari√°veis SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
    }
    
    return createClient(supabaseUrl, supabaseServiceKey);
}

/**
 * POST /api/blog/queue/add
 * Adicionar post manualmente √† fila
 */
router.post('/add', async (req, res) => {
    try {
        const { title, content, category, date, imageurl, autor } = req.body;

        // Valida√ß√£o
        if (!title || !content || !category || !date) {
            return res.status(400).json({
                success: false,
                error: 'Campos obrigat√≥rios: title, content, category, date'
            });
        }

        console.log('ÔøΩÔøΩ Adicionando post √† fila:', { title, category, date });

        const supabase = getSupabaseClient();
        
        // Inserir na fila
        const { data, error } = await supabase
            .from('n8n_blog_queue')
            .insert([{
                title,
                content,
                category,
                date,
                imageurl: imageurl || null,
                autor: autor || 'LeadBaze Team',
                processed: false,
                created_at: new Date().toISOString()
            }])
            .select();

        if (error) {
            console.error('‚ùå Erro ao adicionar post √† fila:', error);
            return res.status(500).json({
                success: false,
                error: 'Erro ao adicionar post √† fila',
                details: error.message
            });
        }

        console.log('‚úÖ Post adicionado √† fila com sucesso:', data[0]);

        res.json({
            success: true,
            message: 'Post adicionado √† fila com sucesso',
            data: data[0]
        });

    } catch (error) {
        console.error('‚ùå Erro ao adicionar post √† fila:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao adicionar post √† fila',
            details: error.message
        });
    }
});

/**
 * GET /api/blog/queue/list
 * Listar posts na fila
 */
router.get('/list', async (req, res) => {
    try {
        const supabase = getSupabaseClient();
        const { data, error } = await supabase
            .from('n8n_blog_queue')
            .select('*')
            .order('created_at', { ascending: false });

        if (error) {
            console.error('‚ùå Erro ao listar posts da fila:', error);
            return res.status(500).json({
                success: false,
                error: 'Erro ao listar posts da fila',
                details: error.message
            });
        }

        console.log('üìã Posts na fila:', data.length);

        res.json({
            success: true,
            data: data
        });

    } catch (error) {
        console.error('‚ùå Erro ao listar posts da fila:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao listar posts da fila',
            details: error.message
        });
    }
});

/**
 * POST /api/blog/queue/process
 * Processar fila manualmente
 */
router.post('/process', async (req, res) => {
    try {
        // Importar o servi√ßo de automa√ß√£o com solu√ß√£o robusta
        let BlogAutomationService;
        try {
            BlogAutomationService = require('../services/blogAutomationService').default;
        } catch (e) {
            BlogAutomationService = require('../services/blogAutomationService');
        }
        
        const automationService = new BlogAutomationService();
        
        console.log('üîÑ Iniciando processamento manual da fila...');
        
        // Processar a fila
        const result = await automationService.processQueue();
        
        console.log('‚úÖ Processamento manual conclu√≠do:', result);
        
        res.json({
            success: true,
            message: 'Fila processada com sucesso',
            result: result
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao processar fila:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao processar fila',
            details: error.message
        });
    }
});

/**
 * DELETE /api/blog/queue/clear
 * Limpar fila (apenas posts n√£o processados)
 */
router.delete('/clear', async (req, res) => {
    try {
        const supabase = getSupabaseClient();
        
        // Deletar apenas posts n√£o processados
        const { data, error } = await supabase
            .from('n8n_blog_queue')
            .delete()
            .eq('processed', false);

        if (error) {
            console.error('‚ùå Erro ao limpar fila:', error);
            return res.status(500).json({
                success: false,
                error: 'Erro ao limpar fila',
                details: error.message
            });
        }

        console.log('üßπ Fila limpa com sucesso');

        res.json({
            success: true,
            message: 'Fila limpa com sucesso'
        });

    } catch (error) {
        console.error('‚ùå Erro ao limpar fila:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar fila',
            details: error.message
        });
    }
});

module.exports = router;
