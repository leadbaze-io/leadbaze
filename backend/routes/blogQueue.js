/**
 * =====================================================
 * BLOG QUEUE ROUTES - Inser√ß√£o Manual de Posts
 * =====================================================
 */

const express = require('express');
const router = express.Router();
const { createClient } = require('@supabase/supabase-js');

// Fun√ß√£o para obter cliente Supabase
function getSupabaseClient() {
    return createClient(
        process.env.SUPABASE_URL,
        process.env.SUPABASE_SERVICE_ROLE_KEY
    );
}

/**
 * GET /api/blog/queue/test
 * Testar conex√£o com Supabase
 */
router.get('/test', async (req, res) => {
    try {
        console.log('üîç [BlogQueue] Testando conex√£o com Supabase...');
        
        const supabase = getSupabaseClient();
        console.log('üîó [BlogQueue] Cliente Supabase criado');
        
        // Testar conex√£o fazendo uma consulta simples
        const { data, error } = await supabase
            .from('n8n_blog_queue')
            .select('count')
            .limit(1);
        
        if (error) {
            console.error('‚ùå [BlogQueue] Erro na conex√£o:', error);
            return res.status(500).json({
                success: false,
                error: 'Erro na conex√£o com Supabase',
                details: error.message
            });
        }
        
        console.log('‚úÖ [BlogQueue] Conex√£o com Supabase OK');
        res.json({
            success: true,
            message: 'Conex√£o com Supabase funcionando',
            data: data
        });
        
    } catch (error) {
        console.error('‚ùå [BlogQueue] Erro no teste:', error);
        res.status(500).json({
            success: false,
            error: 'Erro no teste de conex√£o',
            details: error.message
        });
    }
});

/**
 * POST /api/blog/queue/add
 * Adicionar post manualmente √† fila
 */
router.post('/add', async (req, res) => {
    try {
        console.log('üîç [BlogQueue] Recebendo requisi√ß√£o para adicionar √† fila');
        console.log('üì¶ [BlogQueue] Body recebido:', JSON.stringify(req.body, null, 2));
        
        const { title, content, category, date, imageurl, autor } = req.body;
        
        // Valida√ß√£o
        if (!title || !content || !category || !date) {
            console.log('‚ùå [BlogQueue] Valida√ß√£o falhou - campos obrigat√≥rios ausentes');
            console.log('üìã [BlogQueue] Campos recebidos:', { title: !!title, content: !!content, category: !!category, date: !!date });
            return res.status(400).json({
                success: false,
                error: 'Campos obrigat√≥rios: title, content, category, date'
            });
        }
        
        console.log('‚úÖ [BlogQueue] Valida√ß√£o passou, tentando conectar ao Supabase...');
        
        // Inserir na fila
        const supabase = getSupabaseClient();
        console.log('üîó [BlogQueue] Cliente Supabase criado');
        
        const insertData = {
            title,
            content,
            category,
            date,
            imageurl: imageurl || null,
            autor: autor || 'LeadBaze Team',
            processed: false
        };
        
        console.log('üìù [BlogQueue] Dados para inser√ß√£o:', JSON.stringify(insertData, null, 2));
        
        const { data, error } = await supabase
            .from('n8n_blog_queue')
            .insert([insertData])
            .select()
            .single();
        
        if (error) {
            console.error('‚ùå [BlogQueue] Erro ao adicionar √† fila:', error);
            console.error('‚ùå [BlogQueue] Detalhes do erro:', JSON.stringify(error, null, 2));
            return res.status(500).json({
                success: false,
                error: 'Erro ao adicionar √† fila',
                details: error.message
            });
        }
        
        console.log('‚úÖ [BlogQueue] Post adicionado com sucesso:', JSON.stringify(data, null, 2));
        
        console.log('‚úÖ Post adicionado √† fila:', data);
        res.json({
            success: true,
            message: 'Post adicionado √† fila com sucesso',
            data
        });
        
    } catch (error) {
        console.error('‚ùå Erro no endpoint /add:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            details: error.message
        });
    }
});

/**
 * GET /api/blog/queue/list
 * Listar posts na fila
 */
router.get('/list', async (req, res) => {
    try {
        const supabase = getSupabaseClient();
        const { data, error } = await supabase
            .from('n8n_blog_queue')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('‚ùå Erro ao listar fila:', error);
            return res.status(500).json({
                success: false,
                error: 'Erro ao listar fila',
                details: error.message
            });
        }
        
        res.json({
            success: true,
            data: data || []
        });
        
    } catch (error) {
        console.error('‚ùå Erro no endpoint /list:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            details: error.message
        });
    }
});

/**
 * POST /api/blog/queue/process
 * Processar fila manualmente
 */
router.post('/process', async (req, res) => {
    try {
        // Importar o servi√ßo de automa√ß√£o
        const { BlogAutomationService, getBlogAutomationService } = require('../services/blogAutomationService');
        const automationService = getBlogAutomationService();
        
        // Processar fila
        const result = await automationService.processQueue();
        
        res.json({
            success: true,
            message: 'Fila processada com sucesso',
            result
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao processar fila:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao processar fila',
            details: error.message
        });
    }
});

module.exports = router;
