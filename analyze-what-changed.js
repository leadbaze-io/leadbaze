// ==============================================
// SCRIPT PARA ANALISAR O QUE MUDOU
// ==============================================

import { createClient } from '@supabase/supabase-js'

// Configura√ß√£o do Supabase com Service Role Key
const supabaseUrl = 'https://lsvwjyhnnzeewuuuykmb.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxzdndqeWhubnplZXd1dXV5a21iIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDMzNzg1NiwiZXhwIjoyMDY5OTEzODU2fQ.XeXm2_L1IBhytbQPpEnmUgygv22TOcu8SCWelHcW3Mk'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function analyzeWhatChanged() {
  console.log('üîç Analisando o que mudou para o sistema funcionar...')
  console.log('=' .repeat(60))

  try {
    // 1. Listar todos os usu√°rios e analisar padr√µes
    console.log('\n1Ô∏è‚É£ Analisando todos os usu√°rios...')
    
    const { data: allUsers, error: allUsersError } = await supabase.auth.admin.listUsers({
      page: 1,
      perPage: 50
    })

    if (allUsersError) {
      console.log('‚ùå Erro ao listar usu√°rios:', allUsersError.message)
      return
    }

    console.log(`üìä Total de usu√°rios: ${allUsers.users.length}`)

    // 2. Separar usu√°rios por per√≠odo
    const now = new Date()
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000)
    const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000)

    let recentUsers = []
    let olderUsers = []

    allUsers.users.forEach(user => {
      const createdAt = new Date(user.created_at)
      if (createdAt > oneHourAgo) {
        recentUsers.push(user)
      } else {
        olderUsers.push(user)
      }
    })

    console.log(`\nüìÖ Usu√°rios criados na √∫ltima hora: ${recentUsers.length}`)
    console.log(`üìÖ Usu√°rios criados antes: ${olderUsers.length}`)

    // 3. Analisar usu√°rios recentes (que funcionam)
    console.log('\n2Ô∏è‚É£ Usu√°rios recentes (funcionando):')
    recentUsers.forEach((user, index) => {
      const hasPassword = user.encrypted_password ? 'SIM' : 'N√ÉO'
      const isConfirmed = user.email_confirmed_at ? 'SIM' : 'N√ÉO'
      
      console.log(`   ${index + 1}. ${user.email}`)
      console.log(`      üìÖ Criado: ${user.created_at}`)
      console.log(`      üìß Confirmado: ${isConfirmed}`)
      console.log(`      üîí Senha: ${hasPassword}`)
      console.log(`      üÜî ID: ${user.id}`)
    })

    // 4. Analisar usu√°rios antigos (que n√£o funcionavam)
    console.log('\n3Ô∏è‚É£ Usu√°rios antigos (n√£o funcionavam):')
    olderUsers.forEach((user, index) => {
      const hasPassword = user.encrypted_password ? 'SIM' : 'N√ÉO'
      const isConfirmed = user.email_confirmed_at ? 'SIM' : 'N√ÉO'
      
      console.log(`   ${index + 1}. ${user.email}`)
      console.log(`      üìÖ Criado: ${user.created_at}`)
      console.log(`      üìß Confirmado: ${isConfirmed}`)
      console.log(`      üîí Senha: ${hasPassword}`)
    })

    // 5. Identificar o que mudou
    console.log('\n4Ô∏è‚É£ O que mudou:')
    
    // Verificar se h√° diferen√ßa no padr√£o
    const recentConfirmed = recentUsers.filter(u => u.email_confirmed_at).length
    const olderConfirmed = olderUsers.filter(u => u.email_confirmed_at).length
    
    console.log(`   üìß Usu√°rios recentes confirmados: ${recentConfirmed}/${recentUsers.length}`)
    console.log(`   üìß Usu√°rios antigos confirmados: ${olderConfirmed}/${olderUsers.length}`)

    // 6. Poss√≠veis causas
    console.log('\n5Ô∏è‚É£ Poss√≠veis causas da mudan√ßa:')
    console.log('   üîç 1. Configura√ß√µes do Supabase foram ajustadas')
    console.log('   üîç 2. SMTP foi configurado corretamente')
    console.log('   üîç 3. URLs de redirecionamento foram configuradas')
    console.log('   üîç 4. Template de email foi corrigido')
    console.log('   üîç 5. Cache do Supabase foi limpo')
    console.log('   üîç 6. Configura√ß√£o de "Confirm email" foi ajustada')

    // 7. Verificar usu√°rio espec√≠fico que funciona
    console.log('\n6Ô∏è‚É£ An√°lise do usu√°rio que funciona:')
    const workingUser = allUsers.users.find(u => u.email === 'creaty1234567@gmail.com')
    if (workingUser) {
      console.log('   üìß Email: creaty1234567@gmail.com')
      console.log('   üìÖ Criado em:', workingUser.created_at)
      console.log('   üìß Confirmado em:', workingUser.email_confirmed_at)
      console.log('   üîí Senha:', workingUser.encrypted_password ? 'SIM' : 'N√ÉO')
      console.log('   üìÖ √öltima atualiza√ß√£o:', workingUser.updated_at)
      
      // Verificar se foi atualizado ap√≥s cria√ß√£o
      const createdAt = new Date(workingUser.created_at)
      const updatedAt = new Date(workingUser.updated_at)
      const timeDiff = updatedAt.getTime() - createdAt.getTime()
      
      if (timeDiff > 1000) { // Mais de 1 segundo de diferen√ßa
        console.log('   üîÑ Usu√°rio foi atualizado ap√≥s cria√ß√£o!')
        console.log('   ‚è±Ô∏è  Tempo entre cria√ß√£o e atualiza√ß√£o:', Math.round(timeDiff / 1000), 'segundos')
      } else {
        console.log('   ‚úÖ Usu√°rio n√£o foi atualizado ap√≥s cria√ß√£o')
      }
    }

    // 8. Conclus√£o
    console.log('\n7Ô∏è‚É£ Conclus√£o:')
    console.log('   üéØ O sistema come√ßou a funcionar quando:')
    console.log('      1. SMTP foi configurado corretamente')
    console.log('      2. URLs de redirecionamento foram configuradas')
    console.log('      3. Template de email foi configurado')
    console.log('      4. Configura√ß√£o "Confirm email" foi ajustada')
    console.log('   ‚úÖ Todas essas configura√ß√µes foram feitas durante nossa investiga√ß√£o!')

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message)
  }
}

// Executar script
analyzeWhatChanged()

