// ==============================================
// SCRIPT PARA TESTAR SE O BUG DE AUTENTICA√á√ÉO FOI CORRIGIDO
// ==============================================

import { createClient } from '@supabase/supabase-js'

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://lsvwjyhnnzeewuuuykmb.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxzdndqeWhubnplZXd1dXV5a21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQzMzc4NTYsImV4cCI6MjA2OTkxMzg1Nn0.jNw-YTXlnbd51l7RHHQpTYgCqxERz6NqPggqMM41Fck'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxzdndqeWhubnplZXd1dXV5a21iIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDMzNzg1NiwiZXhwIjoyMDY5OTEzODU2fQ.XeXm2_L1IBhytbQPpEnmUgygv22TOcu8SCWelHcW3Mk'

const supabase = createClient(supabaseUrl, supabaseAnonKey)
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey)

async function testAuthFix() {
  console.log('üß™ Testando se o bug de autentica√ß√£o foi corrigido...')
  console.log('=' .repeat(60))

  // Dados de teste
  const testEmail = `test-fix-${Date.now()}@example.com`
  const testPassword = 'TestPassword123!'
  const testName = 'Usu√°rio Teste Fix'

  console.log(`\nüìß Email de teste: ${testEmail}`)
  console.log(`üîê Senha de teste: ${testPassword}`)

  try {
    // 1. Criar usu√°rio de teste
    console.log('\n1Ô∏è‚É£ Criando usu√°rio de teste...')
    
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        emailRedirectTo: 'https://leadbaze.io/auth/callback',
        data: {
          name: testName
        }
      }
    })

    if (authError) {
      console.log('‚ùå Erro ao criar usu√°rio:', authError.message)
      return
    }

    if (!authData.user) {
      console.log('‚ùå Usu√°rio n√£o foi criado')
      return
    }

    console.log('‚úÖ Usu√°rio criado com sucesso!')
    console.log('   üÜî ID:', authData.user.id)
    console.log('   üìß Email:', authData.user.email)
    console.log('   üìß Email confirmado:', authData.user.email_confirmed_at ? 'Sim' : 'N√£o')

    // 2. Verificar se a senha foi salva
    console.log('\n2Ô∏è‚É£ Verificando se a senha foi salva...')
    
    const { data: userData, error: userError } = await supabaseAdmin.auth.admin.getUserById(authData.user.id)
    
    if (userError) {
      console.log('‚ùå Erro ao consultar usu√°rio:', userError.message)
    } else if (userData && userData.user) {
      const user = userData.user
      const hasPassword = user.encrypted_password ? 'SIM' : 'N√ÉO'
      console.log(`   üîí Senha criptografada: ${hasPassword}`)
      
      if (user.encrypted_password) {
        console.log('   üîê Hash da senha:', user.encrypted_password.substring(0, 50) + '...')
        console.log('   ‚úÖ BUG CORRIGIDO! Senha est√° sendo salva.')
      } else {
        console.log('   ‚ùå BUG AINDA EXISTE! Senha n√£o foi salva.')
        console.log('   üîß Verifique as configura√ß√µes do Supabase:')
        console.log('      1. Email confirmations habilitado?')
        console.log('      2. SMTP configurado?')
        console.log('      3. Templates de email configurados?')
      }
    }

    // 3. Testar login (se email n√£o precisar de confirma√ß√£o)
    if (authData.user.email_confirmed_at) {
      console.log('\n3Ô∏è‚É£ Testando login imediato...')
      
      const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
        email: testEmail,
        password: testPassword
      })

      if (loginError) {
        console.log('‚ùå Erro no login:', loginError.message)
      } else if (loginData.user) {
        console.log('‚úÖ Login realizado com sucesso!')
        console.log('   üÜî User ID:', loginData.user.id)
      }
    } else {
      console.log('\n3Ô∏è‚É£ Login n√£o testado - email precisa de confirma√ß√£o')
      console.log('   üìß Verifique seu email para confirmar a conta')
      console.log('   üîó Ap√≥s confirmar, teste o login manualmente')
    }

    // 4. Verificar configura√ß√µes de email
    console.log('\n4Ô∏è‚É£ Status das configura√ß√µes:')
    console.log('   üìß Email de confirma√ß√£o necess√°rio:', !authData.user.email_confirmed_at)
    console.log('   üîÑ URL de redirecionamento:', 'https://leadbaze.io/auth/callback')
    
    if (!authData.user.email_confirmed_at) {
      console.log('   ‚úÖ Configura√ß√£o correta: Email de confirma√ß√£o √© necess√°rio')
    } else {
      console.log('   ‚ö†Ô∏è  Configura√ß√£o pode estar incorreta: Email confirmado automaticamente')
    }

    // 5. Resultado final
    console.log('\n5Ô∏è‚É£ Resultado do teste:')
    
    if (userData && userData.user && userData.user.encrypted_password) {
      console.log('   üéâ SUCESSO! O bug foi corrigido!')
      console.log('   ‚úÖ Senhas est√£o sendo salvas corretamente')
      console.log('   ‚úÖ Sistema de autentica√ß√£o funcionando')
    } else {
      console.log('   ‚ùå FALHA! O bug ainda existe.')
      console.log('   üîß A√ß√µes necess√°rias:')
      console.log('      1. Configure SMTP no Supabase Dashboard')
      console.log('      2. Habilite email confirmations')
      console.log('      3. Configure templates de email')
      console.log('      4. Teste novamente')
    }

    // 6. Limpar usu√°rio de teste
    console.log('\n6Ô∏è‚É£ Limpando usu√°rio de teste...')
    console.log(`   üÜî ID para deletar manualmente: ${authData.user.id}`)
    console.log('   ‚ö†Ô∏è  Execute no Supabase Dashboard: Authentication ‚Üí Users ‚Üí Delete')

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message)
  }
}

// Executar script
testAuthFix()

