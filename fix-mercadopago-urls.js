// üîß Script para Corrigir URLs do Mercado Pago para Auto Return
// Este script atualiza as URLs para usar uma URL p√∫blica tempor√°ria

const fs = require('fs');
const path = require('path');

console.log('üîß Corrigindo URLs do Mercado Pago para Auto Return...\n');

// URL p√∫blica tempor√°ria (voc√™ pode usar ngrok, localtunnel, ou seu dom√≠nio)
const PUBLIC_URL = 'https://leadbaze.io'; // Substitua pela sua URL p√∫blica

// Caminhos dos arquivos para atualizar
const filesToUpdate = [
    'src/lib/mercadoPagoService.ts',
    'backend/ecosystem.config.js'
];

// Fun√ß√£o para atualizar arquivo
function updateFile(filePath) {
    try {
        if (!fs.existsSync(filePath)) {
            console.log(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${filePath}`);
            return false;
        }

        let content = fs.readFileSync(filePath, 'utf8');
        let updated = false;

        // Padr√µes para substituir
        const patterns = [
            {
                search: /NEXT_PUBLIC_APP_URL:\s*['"`][^'"`]*['"`]/g,
                replace: `NEXT_PUBLIC_APP_URL: '${PUBLIC_URL}'`
            },
            {
                search: /process\.env\.NEXT_PUBLIC_APP_URL\s*\|\|\s*['"`][^'"`]*['"`]/g,
                replace: `process.env.NEXT_PUBLIC_APP_URL || '${PUBLIC_URL}'`
            },
            {
                search: /http:\/\/localhost:5173/g,
                replace: PUBLIC_URL
            }
        ];

        // Aplicar substitui√ß√µes
        patterns.forEach(pattern => {
            if (pattern.search.test(content)) {
                content = content.replace(pattern.search, pattern.replace);
                updated = true;
            }
        });

        if (updated) {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`‚úÖ Atualizado: ${filePath}`);
            return true;
        } else {
            console.log(`‚ÑπÔ∏è  Nenhuma altera√ß√£o necess√°ria: ${filePath}`);
            return false;
        }

    } catch (error) {
        console.log(`‚ùå Erro ao atualizar ${filePath}: ${error.message}`);
        return false;
    }
}

// Atualizar arquivos
let updatedFiles = 0;
filesToUpdate.forEach(filePath => {
    if (updateFile(filePath)) {
        updatedFiles++;
    }
});

console.log(`\nüìä Resumo:`);
console.log(`   Arquivos atualizados: ${updatedFiles}/${filesToUpdate.length}`);
console.log(`   URL p√∫blica configurada: ${PUBLIC_URL}`);

if (updatedFiles > 0) {
    console.log(`\nüîÑ Pr√≥ximos passos:`);
    console.log(`   1. Reinicie o backend: cd backend && pm2 restart leadbaze-backend`);
    console.log(`   2. Teste o pagamento em: ${PUBLIC_URL}/plans`);
    console.log(`   3. Verifique se o auto_return funciona`);
} else {
    console.log(`\n‚ö†Ô∏è  Nenhum arquivo foi atualizado. Verifique se os arquivos existem.`);
}

console.log(`\nüéØ URLs configuradas:`);
console.log(`   Success: ${PUBLIC_URL}/payment/success`);
console.log(`   Failure: ${PUBLIC_URL}/payment/failure`);
console.log(`   Pending: ${PUBLIC_URL}/payment/pending`);

console.log(`\n‚úÖ Script conclu√≠do!`);



